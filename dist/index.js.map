{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - first input array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - second input array element accessors\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Object} `x`\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar xset;\n\tvar yset;\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\txset = x.accessors[ 1 ];\n\tyget = y.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = xget( xbuf, ix );\n\t\t\tvy = yget( ybuf, iy );\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, lx, vx );\n\t\t\t\tyset( ybuf, ly, vy );\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = xget( xbuf, ix );\n\t\tvy = yget( ybuf, iy );\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\txset( xbuf, jx, xget( xbuf, jx+strideX ) );\n\t\t\t\tyset( ybuf, jy, yget( ybuf, jy+strideY ) );\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\txset( xbuf, lx, vx );\n\t\t\tyset( ybuf, ly, vy );\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = xget( xbuf, jx );\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\txset( xbuf, jx+strideX, ux );\n\t\t\t\tyset( ybuf, jy+strideY, yget( ybuf, jy ) );\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\txset( xbuf, jx+strideX, vx );\n\t\t\tyset( ybuf, jy+strideY, vy );\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2ins;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar flg;\n\tvar ix;\n\tvar jx;\n\tvar fx;\n\tvar lx;\n\tvar iy;\n\tvar jy;\n\tvar fy;\n\tvar ly;\n\tvar vx;\n\tvar vy;\n\tvar ux;\n\tvar ox;\n\tvar oy;\n\tvar i;\n\n\tif ( N <= 0 || order === 0.0 ) {\n\t\treturn x;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, order, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn x;\n\t}\n\t// For a positive stride, sorting in decreasing order is equivalent to providing a negative stride and sorting in increasing order, and, for a negative stride, sorting in decreasing order is equivalent to providing a positive stride and sorting in increasing order...\n\tif ( order < 0.0 ) {\n\t\tstrideX *= -1;\n\t\tstrideY *= -1;\n\t\toffsetX -= (N-1) * strideX;\n\t\toffsetY -= (N-1) * strideY;\n\t}\n\tfx = offsetX;              // first index\n\tlx = fx + ((N-1)*strideX); // last index\n\tix = fx + strideX;\n\n\tfy = offsetY;              // first index\n\tly = fy + ((N-1)*strideY); // last index\n\tiy = fy + strideY;\n\n\tif ( strideX < 0 ) {\n\t\t// Traverse the strided array from right-to-left...\n\n\t\t// Sort in increasing order...\n\t\tfor ( i = 1; i < N; i++ ) {\n\t\t\tvx = x[ ix ];\n\t\t\tvy = y[ iy ];\n\n\t\t\t// Sort `NaN` values to the end (i.e., the left)...\n\t\t\tif ( isnan( vx ) ) {\n\t\t\t\tjx = ix;\n\t\t\t\tjy = iy;\n\n\t\t\t\t// Shift all values (including NaNs) to the left of the current element to the right...\n\t\t\t\twhile ( jx > lx ) {\n\t\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\t\tjx += strideX;\n\t\t\t\t\tjy += strideY;\n\t\t\t\t}\n\t\t\t\tx[ lx ] = vx;\n\t\t\t\ty[ ly ] = vy;\n\t\t\t} else {\n\t\t\t\tflg = isNegativeZero( vx );\n\t\t\t\tjx = ix - strideX;\n\t\t\t\tjy = iy - strideY;\n\n\t\t\t\t// Shift all larger values to the right of the current element to the left...\n\t\t\t\twhile ( jx <= fx ) {\n\t\t\t\t\tux = x[ jx ];\n\t\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when last element is NaN)) are sorted to the left\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\t\tjx -= strideX;\n\t\t\t\t\tjy -= strideY;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = vx;\n\t\t\t\ty[ jy+strideY ] = vy;\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\t// Traverse the strided array from left-to-right...\n\n\t// Sort in increasing order...\n\tfor ( i = 1; i < N; i++ ) {\n\t\tvx = x[ ix ];\n\t\tvy = y[ iy ];\n\n\t\t// Sort `NaN` values to the end...\n\t\tif ( isnan( vx ) ) {\n\t\t\tjx = ix;\n\t\t\tjy = iy;\n\n\t\t\t// Shift all values (including NaNs) to the right of the current element to the left...\n\t\t\twhile ( jx < lx ) {\n\t\t\t\tx[ jx ] = x[ jx+strideX ];\n\t\t\t\ty[ jy ] = y[ jy+strideY ];\n\t\t\t\tjx += strideX;\n\t\t\t\tjy += strideY;\n\t\t\t}\n\t\t\tx[ lx ] = vx;\n\t\t\ty[ ly ] = vy;\n\t\t} else {\n\t\t\tflg = isNegativeZero( vx );\n\t\t\tjx = ix - strideX;\n\t\t\tjy = iy - strideY;\n\n\t\t\t// Shift all larger values to the left of the current element to the right...\n\t\t\twhile ( jx >= fx ) {\n\t\t\t\tux = x[ jx ];\n\t\t\t\tif ( ux <= vx && !(flg && ux === vx && isNegativeZero( ux ) === false) ) { // eslint-disable-line max-len\n\t\t\t\t\t// Note: positive zeros (and NaNs (e.g., when first element is NaN)) are sorted to the right\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tx[ jx+strideX ] = ux;\n\t\t\t\ty[ jy+strideY ] = y[ jy ];\n\t\t\t\tjx -= strideX;\n\t\t\t\tjy -= strideY;\n\t\t\t}\n\t\t\tx[ jx+strideX ] = vx;\n\t\t\ty[ jy+strideY ] = vy;\n\t\t\tix += strideX;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2ins;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Simultaneously sorts two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} order - sort order\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length for `y`\n* @returns {NumericArray} `x`\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\nfunction gsort2ins( N, order, x, strideX, y, strideY ) {\n\treturn ndarray( N, order, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = gsort2ins;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously sort two strided arrays based on the sort order of the first array using insertion sort.\n*\n* @module @stdlib/blas-ext-base-gsort2ins\n*\n* @example\n* var gsort2ins = require( '@stdlib/blas-ext-base-gsort2ins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins( x.length, 1.0, x, 1, y, 1 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*\n* @example\n* var gsort2ins = require( '@stdlib/blas-ext-base-gsort2ins' );\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0 ];\n* var y = [ 0.0, 1.0, 2.0, 3.0 ];\n*\n* gsort2ins.ndarray( x.length, 1.0, x, 1, 0, y, 1, 0 );\n*\n* console.log( x );\n* // => [ -4.0, -2.0, 1.0, 3.0 ]\n*\n* console.log( y );\n* // => [ 3.0, 1.0, 0.0, 2.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isNegativeZero", "isnan", "gsort2ins", "N", "order", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "xbuf", "ybuf", "xget", "yget", "xset", "yset", "flg", "ix", "jx", "fx", "lx", "iy", "jy", "fy", "ly", "vx", "vy", "ux", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "isNegativeZero", "isnan", "accessors", "gsort2ins", "N", "order", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "flg", "ix", "jx", "fx", "lx", "iy", "jy", "fy", "ly", "vx", "vy", "ux", "ox", "oy", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "gsort2ins", "N", "order", "x", "strideX", "y", "strideY", "setReadOnly", "main", "ndarray"]
}
